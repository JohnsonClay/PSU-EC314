{
    "collab_server" : "",
    "contents" : "# Class definitions\n\nTVM<-setClass(\"TVM\", \n              slots=c(N=\"numeric\",Shift=\"numeric\"),\n              prototype=list(N=0,Shift=0))\n\n\nConstant<-setClass(\"Constant\", \n                   slots=c(A=\"numeric\"),\n                   prototype=list(A=0),\n                   contains=\"TVM\")\n\nLinear<-setClass(\"Linear\",\n                 slots=c(G=\"numeric\"),\n                 prototype=list(G=0),\n                 contains=\"TVM\")\n\nGeometric<-setClass(\"Geometric\",\n                    slots=c(A1=\"numeric\",g=\"numeric\"),\n                    prototype=list(A1=0,g=0),\n                    contains=\"TVM\")\n\nSingleton<-setClass(\"Singleton\",\n                   slots=c(A=\"numeric\"),\n                   prototype=list(A=0),\n                   contains=\"TVM\")\n\n\n# Constructors\n\nConstant<-function(A=0,N=0,Shift=0){new(\"Constant\",N=N,Shift=Shift,A=A )}\nLinear<-function(G=0,N=0,Shift=0){new(\"Linear\",N=N,Shift=Shift,G=G )}\nGeometric<-function(A1=0,g=0,N=0,Shift=0){new(\"Geometric\",N=N,Shift=Shift,A1=A1,g=g )}\nSingleton<-function(A=0,N=0){new(\"Singleton\",N=N,Shift=0,A=A )}\n\n\n# For printing out the factor notation representation\n\nsetGeneric(name='FactorNotation',\n           def=function(theObject)\n           {\n             standardGeneric(\"FactorNotation\")\n           }\n)\n\nsetMethod(f=\"FactorNotation\",\n          signature=\"Constant\",\n          definition=function(theObject)\n          {\n            paste(\"\\\\\\\\frac{\",theObject@A,\"(P|A, i ,\", theObject@N,\")}{(1+i)^{\",theObject@Shift,\"}}\",sep=\"\")\n            \n          }\n)\n\nsetMethod(f=\"FactorNotation\",\n          signature=\"Linear\",\n          definition=function(theObject)\n          {\n            paste(\"\\\\\\\\frac{\",theObject@G,\"(P|G, i ,\", theObject@N,\")}{(1+i)^{\",theObject@Shift,\"}}\",sep=\"\")\n            \n          }\n)\n\n\n\nsetMethod(f=\"FactorNotation\",\n          signature=\"Geometric\",\n          definition=function(theObject)\n          {\n            paste(\"\\\\\\\\frac{\",theObject@A1,\"(P|A_1, i ,\",\"g=\",theObject@g*100,\"\\\\\\\\%,\", theObject@N,\")}{(1+i)^{\",theObject@Shift,\"}}\",sep=\"\")\n            \n          }\n)\n\nsetMethod(f=\"FactorNotation\",\n          signature=\"Singleton\",\n          definition=function(theObject)\n            {\n              paste(\"\\\\\\\\frac{\",theObject@A,\"}{(1+i)^{\",theObject@N,\"}}\",sep=\"\")\n            }\n)\n\nsetMethod(f=\"length\",\n          signature='TVM',\n          definition=function(theObject)\n          {\n            theObject@Shift+theObject@N+1\n          }\n)\n\n\n#A function to give the cash flow as a c().  Note that there is a way to make it be a specific length.  No checking parameters and no defaults.  Length includes the zero.  It is not the last period.\n\nsetGeneric(name=\"CashFlow\",\n           def=function(theObject,len)\n           {\n             standardGeneric(\"CashFlow\")\n           }\n)\n\n\nsetMethod(f=\"CashFlow\",\n          signature=\"Constant\",\n          definition=function(theObject,len=0)\n          {\n            base<-c(0,rep(theObject@A,theObject@N))\n            if(theObject@Shift==-1) base<-base[-1] else base<-c(rep(0,theObject@Shift),base)\n            length(base)<-len\n            base[is.na(base)]<-0\n            base\n          }\n)\n\nsetMethod(f=\"CashFlow\",\n          signature=\"Linear\",\n          definition=function(theObject,len=0)\n          {\n            base<-c(0,seq(from=0,by=theObject@G,length.out=theObject@N))\n            if(theObject@Shift==-1) base<-base[-1] else base<-c(rep(0,theObject@Shift),base)\n            length(base)<-len\n            base[is.na(base)]<-0\n            base\n          }\n)\n\n\nsetMethod(f=\"CashFlow\",\n          signature=\"Geometric\",\n          definition=function(theObject,len=0)\n          {\n            base<-c(0,rep(theObject@A1,theObject@N)*(1+theObject@g)^seq(0,theObject@N-1))\n            if(theObject@Shift==-1) base<-base[-1] else base<-c(rep(0,theObject@Shift),base)\n            length(base)<-len\n            base[is.na(base)]<-0\n            base\n          }\n)\n\n\nsetMethod(f=\"CashFlow\",\n          signature=\"Singleton\",\n          definition=function(theObject,len=0)\n            {\n            base<-rep(0,theObject@N+1)\n            base[theObject@N+1]<-theObject@A\n            length(base)<-len\n            base[is.na(base)]<-0\n            base\n            }\n)\n\nCombinedCashFlow<-function(ListofTVM){\n  longest<-max(unlist(lapply(ListofTVM,length)))\n  rowSums(simplify2array(lapply(ListofTVM,FUN=function(obj)CashFlow(obj,longest))))    \n}\n\n\n##\n# Singleton(10,5)\n# CombinedCashFlow(list(Singleton(A=10,N=5),Singleton(A=10,N=6)))\n\n\nlibrary(ggplot2)\nlibrary(scales)\n\nCF_Diagram <- function(values){\n  LastTime <- length(values) - 1 \n  values[values == 0 ] <- NA\n  CFs <- data.frame(x1 = 0:LastTime, x2 = 0, y1 = 0:LastTime, y2 = values )\n  ggplot(CFs , aes(x = x1, y = x2, xend = y1, yend = y2, label = y2))  +\n    geom_segment( arrow = arrow(length = unit(.15, \"cm\"))) + \n    geom_text( aes(y = y2), nudge_x = .40) + xlab(\"Time\") + \n    ylab(\"Cash Flow\") + \n    scale_x_continuous(breaks = 0:LastTime) +\n    theme_classic() + theme(axis.line=element_blank()) +\n    geom_segment(aes(x = 0, y = 0, xend = LastTime +1, yend = 0),\n                 arrow = arrow(length = unit(0.15, \"cm\")))\n}  \n\n# CF_Diagram(c(3,5,-9, 4, 8, 0,0,7))\n",
    "created" : 1508880256652.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "710416912",
    "id" : "D6A9A33F",
    "lastKnownWriteTime" : 1508882264,
    "last_content_update" : 1508882264453,
    "path" : "~/Teaching/PSU-EC314/TVMAndLoans/TVM.R",
    "project_path" : "TVMAndLoans/TVM.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}